/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as GuestRouteRouteImport } from './routes/_guest/route'
import { Route as AuthRouteRouteImport } from './routes/_auth/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as GuestSignupRouteImport } from './routes/_guest/signup'
import { Route as GuestLoginRouteImport } from './routes/_guest/login'
import { Route as AuthQuestionsRouteRouteImport } from './routes/_auth/questions/route'
import { Route as AuthPdfsRouteRouteImport } from './routes/_auth/pdfs/route'
import { Route as AuthFlashcardsRouteRouteImport } from './routes/_auth/flashcards/route'
import { Route as AuthQuestionsIndexRouteImport } from './routes/_auth/questions/index'
import { Route as AuthPdfsIndexRouteImport } from './routes/_auth/pdfs/index'
import { Route as AuthFlashcardsIndexRouteImport } from './routes/_auth/flashcards/index'
import { Route as AuthPdfsShowRouteImport } from './routes/_auth/pdfs/show'

const GuestRouteRoute = GuestRouteRouteImport.update({
  id: '/_guest',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRouteRoute = AuthRouteRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const GuestSignupRoute = GuestSignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => GuestRouteRoute,
} as any)
const GuestLoginRoute = GuestLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => GuestRouteRoute,
} as any)
const AuthQuestionsRouteRoute = AuthQuestionsRouteRouteImport.update({
  id: '/questions',
  path: '/questions',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AuthPdfsRouteRoute = AuthPdfsRouteRouteImport.update({
  id: '/pdfs',
  path: '/pdfs',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AuthFlashcardsRouteRoute = AuthFlashcardsRouteRouteImport.update({
  id: '/flashcards',
  path: '/flashcards',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AuthQuestionsIndexRoute = AuthQuestionsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthQuestionsRouteRoute,
} as any)
const AuthPdfsIndexRoute = AuthPdfsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthPdfsRouteRoute,
} as any)
const AuthFlashcardsIndexRoute = AuthFlashcardsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthFlashcardsRouteRoute,
} as any)
const AuthPdfsShowRoute = AuthPdfsShowRouteImport.update({
  id: '/show',
  path: '/show',
  getParentRoute: () => AuthPdfsRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/flashcards': typeof AuthFlashcardsRouteRouteWithChildren
  '/pdfs': typeof AuthPdfsRouteRouteWithChildren
  '/questions': typeof AuthQuestionsRouteRouteWithChildren
  '/login': typeof GuestLoginRoute
  '/signup': typeof GuestSignupRoute
  '/pdfs/show': typeof AuthPdfsShowRoute
  '/flashcards/': typeof AuthFlashcardsIndexRoute
  '/pdfs/': typeof AuthPdfsIndexRoute
  '/questions/': typeof AuthQuestionsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof GuestLoginRoute
  '/signup': typeof GuestSignupRoute
  '/pdfs/show': typeof AuthPdfsShowRoute
  '/flashcards': typeof AuthFlashcardsIndexRoute
  '/pdfs': typeof AuthPdfsIndexRoute
  '/questions': typeof AuthQuestionsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_auth': typeof AuthRouteRouteWithChildren
  '/_guest': typeof GuestRouteRouteWithChildren
  '/_auth/flashcards': typeof AuthFlashcardsRouteRouteWithChildren
  '/_auth/pdfs': typeof AuthPdfsRouteRouteWithChildren
  '/_auth/questions': typeof AuthQuestionsRouteRouteWithChildren
  '/_guest/login': typeof GuestLoginRoute
  '/_guest/signup': typeof GuestSignupRoute
  '/_auth/pdfs/show': typeof AuthPdfsShowRoute
  '/_auth/flashcards/': typeof AuthFlashcardsIndexRoute
  '/_auth/pdfs/': typeof AuthPdfsIndexRoute
  '/_auth/questions/': typeof AuthQuestionsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/flashcards'
    | '/pdfs'
    | '/questions'
    | '/login'
    | '/signup'
    | '/pdfs/show'
    | '/flashcards/'
    | '/pdfs/'
    | '/questions/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/signup'
    | '/pdfs/show'
    | '/flashcards'
    | '/pdfs'
    | '/questions'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/_guest'
    | '/_auth/flashcards'
    | '/_auth/pdfs'
    | '/_auth/questions'
    | '/_guest/login'
    | '/_guest/signup'
    | '/_auth/pdfs/show'
    | '/_auth/flashcards/'
    | '/_auth/pdfs/'
    | '/_auth/questions/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
  GuestRouteRoute: typeof GuestRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_guest': {
      id: '/_guest'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof GuestRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_guest/signup': {
      id: '/_guest/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof GuestSignupRouteImport
      parentRoute: typeof GuestRouteRoute
    }
    '/_guest/login': {
      id: '/_guest/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof GuestLoginRouteImport
      parentRoute: typeof GuestRouteRoute
    }
    '/_auth/questions': {
      id: '/_auth/questions'
      path: '/questions'
      fullPath: '/questions'
      preLoaderRoute: typeof AuthQuestionsRouteRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/_auth/pdfs': {
      id: '/_auth/pdfs'
      path: '/pdfs'
      fullPath: '/pdfs'
      preLoaderRoute: typeof AuthPdfsRouteRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/_auth/flashcards': {
      id: '/_auth/flashcards'
      path: '/flashcards'
      fullPath: '/flashcards'
      preLoaderRoute: typeof AuthFlashcardsRouteRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/_auth/questions/': {
      id: '/_auth/questions/'
      path: '/'
      fullPath: '/questions/'
      preLoaderRoute: typeof AuthQuestionsIndexRouteImport
      parentRoute: typeof AuthQuestionsRouteRoute
    }
    '/_auth/pdfs/': {
      id: '/_auth/pdfs/'
      path: '/'
      fullPath: '/pdfs/'
      preLoaderRoute: typeof AuthPdfsIndexRouteImport
      parentRoute: typeof AuthPdfsRouteRoute
    }
    '/_auth/flashcards/': {
      id: '/_auth/flashcards/'
      path: '/'
      fullPath: '/flashcards/'
      preLoaderRoute: typeof AuthFlashcardsIndexRouteImport
      parentRoute: typeof AuthFlashcardsRouteRoute
    }
    '/_auth/pdfs/show': {
      id: '/_auth/pdfs/show'
      path: '/show'
      fullPath: '/pdfs/show'
      preLoaderRoute: typeof AuthPdfsShowRouteImport
      parentRoute: typeof AuthPdfsRouteRoute
    }
  }
}

interface AuthFlashcardsRouteRouteChildren {
  AuthFlashcardsIndexRoute: typeof AuthFlashcardsIndexRoute
}

const AuthFlashcardsRouteRouteChildren: AuthFlashcardsRouteRouteChildren = {
  AuthFlashcardsIndexRoute: AuthFlashcardsIndexRoute,
}

const AuthFlashcardsRouteRouteWithChildren =
  AuthFlashcardsRouteRoute._addFileChildren(AuthFlashcardsRouteRouteChildren)

interface AuthPdfsRouteRouteChildren {
  AuthPdfsShowRoute: typeof AuthPdfsShowRoute
  AuthPdfsIndexRoute: typeof AuthPdfsIndexRoute
}

const AuthPdfsRouteRouteChildren: AuthPdfsRouteRouteChildren = {
  AuthPdfsShowRoute: AuthPdfsShowRoute,
  AuthPdfsIndexRoute: AuthPdfsIndexRoute,
}

const AuthPdfsRouteRouteWithChildren = AuthPdfsRouteRoute._addFileChildren(
  AuthPdfsRouteRouteChildren,
)

interface AuthQuestionsRouteRouteChildren {
  AuthQuestionsIndexRoute: typeof AuthQuestionsIndexRoute
}

const AuthQuestionsRouteRouteChildren: AuthQuestionsRouteRouteChildren = {
  AuthQuestionsIndexRoute: AuthQuestionsIndexRoute,
}

const AuthQuestionsRouteRouteWithChildren =
  AuthQuestionsRouteRoute._addFileChildren(AuthQuestionsRouteRouteChildren)

interface AuthRouteRouteChildren {
  AuthFlashcardsRouteRoute: typeof AuthFlashcardsRouteRouteWithChildren
  AuthPdfsRouteRoute: typeof AuthPdfsRouteRouteWithChildren
  AuthQuestionsRouteRoute: typeof AuthQuestionsRouteRouteWithChildren
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthFlashcardsRouteRoute: AuthFlashcardsRouteRouteWithChildren,
  AuthPdfsRouteRoute: AuthPdfsRouteRouteWithChildren,
  AuthQuestionsRouteRoute: AuthQuestionsRouteRouteWithChildren,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

interface GuestRouteRouteChildren {
  GuestLoginRoute: typeof GuestLoginRoute
  GuestSignupRoute: typeof GuestSignupRoute
}

const GuestRouteRouteChildren: GuestRouteRouteChildren = {
  GuestLoginRoute: GuestLoginRoute,
  GuestSignupRoute: GuestSignupRoute,
}

const GuestRouteRouteWithChildren = GuestRouteRoute._addFileChildren(
  GuestRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRouteRoute: AuthRouteRouteWithChildren,
  GuestRouteRoute: GuestRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
