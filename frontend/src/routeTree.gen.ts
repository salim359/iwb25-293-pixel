/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as GuestRouteRouteImport } from './routes/_guest/route'
import { Route as AuthRouteRouteImport } from './routes/_auth/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as GuestSignupRouteImport } from './routes/_guest/signup'
import { Route as GuestLoginRouteImport } from './routes/_guest/login'
import { Route as AuthQuizesRouteRouteImport } from './routes/_auth/quizes/route'
import { Route as AuthPdfsRouteRouteImport } from './routes/_auth/pdfs/route'
import { Route as AuthQuizesIndexRouteImport } from './routes/_auth/quizes/index'
import { Route as AuthPdfsIndexRouteImport } from './routes/_auth/pdfs/index'

const GuestRouteRoute = GuestRouteRouteImport.update({
  id: '/_guest',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRouteRoute = AuthRouteRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const GuestSignupRoute = GuestSignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => GuestRouteRoute,
} as any)
const GuestLoginRoute = GuestLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => GuestRouteRoute,
} as any)
const AuthQuizesRouteRoute = AuthQuizesRouteRouteImport.update({
  id: '/quizes',
  path: '/quizes',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AuthPdfsRouteRoute = AuthPdfsRouteRouteImport.update({
  id: '/pdfs',
  path: '/pdfs',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AuthQuizesIndexRoute = AuthQuizesIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthQuizesRouteRoute,
} as any)
const AuthPdfsIndexRoute = AuthPdfsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthPdfsRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/pdfs': typeof AuthPdfsRouteRouteWithChildren
  '/quizes': typeof AuthQuizesRouteRouteWithChildren
  '/login': typeof GuestLoginRoute
  '/signup': typeof GuestSignupRoute
  '/pdfs/': typeof AuthPdfsIndexRoute
  '/quizes/': typeof AuthQuizesIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof GuestLoginRoute
  '/signup': typeof GuestSignupRoute
  '/pdfs': typeof AuthPdfsIndexRoute
  '/quizes': typeof AuthQuizesIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_auth': typeof AuthRouteRouteWithChildren
  '/_guest': typeof GuestRouteRouteWithChildren
  '/_auth/pdfs': typeof AuthPdfsRouteRouteWithChildren
  '/_auth/quizes': typeof AuthQuizesRouteRouteWithChildren
  '/_guest/login': typeof GuestLoginRoute
  '/_guest/signup': typeof GuestSignupRoute
  '/_auth/pdfs/': typeof AuthPdfsIndexRoute
  '/_auth/quizes/': typeof AuthQuizesIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/pdfs'
    | '/quizes'
    | '/login'
    | '/signup'
    | '/pdfs/'
    | '/quizes/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/login' | '/signup' | '/pdfs' | '/quizes'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/_guest'
    | '/_auth/pdfs'
    | '/_auth/quizes'
    | '/_guest/login'
    | '/_guest/signup'
    | '/_auth/pdfs/'
    | '/_auth/quizes/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
  GuestRouteRoute: typeof GuestRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_guest': {
      id: '/_guest'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof GuestRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_guest/signup': {
      id: '/_guest/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof GuestSignupRouteImport
      parentRoute: typeof GuestRouteRoute
    }
    '/_guest/login': {
      id: '/_guest/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof GuestLoginRouteImport
      parentRoute: typeof GuestRouteRoute
    }
    '/_auth/quizes': {
      id: '/_auth/quizes'
      path: '/quizes'
      fullPath: '/quizes'
      preLoaderRoute: typeof AuthQuizesRouteRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/_auth/pdfs': {
      id: '/_auth/pdfs'
      path: '/pdfs'
      fullPath: '/pdfs'
      preLoaderRoute: typeof AuthPdfsRouteRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/_auth/quizes/': {
      id: '/_auth/quizes/'
      path: '/'
      fullPath: '/quizes/'
      preLoaderRoute: typeof AuthQuizesIndexRouteImport
      parentRoute: typeof AuthQuizesRouteRoute
    }
    '/_auth/pdfs/': {
      id: '/_auth/pdfs/'
      path: '/'
      fullPath: '/pdfs/'
      preLoaderRoute: typeof AuthPdfsIndexRouteImport
      parentRoute: typeof AuthPdfsRouteRoute
    }
  }
}

interface AuthPdfsRouteRouteChildren {
  AuthPdfsIndexRoute: typeof AuthPdfsIndexRoute
}

const AuthPdfsRouteRouteChildren: AuthPdfsRouteRouteChildren = {
  AuthPdfsIndexRoute: AuthPdfsIndexRoute,
}

const AuthPdfsRouteRouteWithChildren = AuthPdfsRouteRoute._addFileChildren(
  AuthPdfsRouteRouteChildren,
)

interface AuthQuizesRouteRouteChildren {
  AuthQuizesIndexRoute: typeof AuthQuizesIndexRoute
}

const AuthQuizesRouteRouteChildren: AuthQuizesRouteRouteChildren = {
  AuthQuizesIndexRoute: AuthQuizesIndexRoute,
}

const AuthQuizesRouteRouteWithChildren = AuthQuizesRouteRoute._addFileChildren(
  AuthQuizesRouteRouteChildren,
)

interface AuthRouteRouteChildren {
  AuthPdfsRouteRoute: typeof AuthPdfsRouteRouteWithChildren
  AuthQuizesRouteRoute: typeof AuthQuizesRouteRouteWithChildren
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthPdfsRouteRoute: AuthPdfsRouteRouteWithChildren,
  AuthQuizesRouteRoute: AuthQuizesRouteRouteWithChildren,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

interface GuestRouteRouteChildren {
  GuestLoginRoute: typeof GuestLoginRoute
  GuestSignupRoute: typeof GuestSignupRoute
}

const GuestRouteRouteChildren: GuestRouteRouteChildren = {
  GuestLoginRoute: GuestLoginRoute,
  GuestSignupRoute: GuestSignupRoute,
}

const GuestRouteRouteWithChildren = GuestRouteRoute._addFileChildren(
  GuestRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRouteRoute: AuthRouteRouteWithChildren,
  GuestRouteRoute: GuestRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
